@page "/project"
@using BlazorWallAreaCalculator.Data
@inject IProjectService ProjectService
@inject SfDialogService DialogService

<h3>Projects</h3>
<hr />

<SfGrid DataSource="@projects" Toolbar="@Toolbaritems">
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Project" RowSelected="RowSelectHandler"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Project.ProjectName)"
                    HeaderText="Project"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
        <GridColumn Field="@nameof(Project.UserEmail)"
                    HeaderText="User Email"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="DialogAddEditProject" IsModal="true" Width="500px" ShowCloseIcon="false" AllowDragging="true" Visible="false">
    <DialogTemplates>
        <Header> @HeaderText </Header>
    </DialogTemplates>
    <EditForm Model="@projectAddEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <div>

            <SfTextBox Enabled="true" Placeholder="Project"
                       FloatLabelType="@FloatLabelType.Always"
            @bind-Value="projectAddEdit.ProjectName">
            </SfTextBox>
            <ValidationMessage For="@(() => projectAddEdit.ProjectName)" />

            <SfTextBox Enabled="true" Placeholder="User Email"
                       FloatLabelType="@FloatLabelType.Always"
            @bind-Value="projectAddEdit.UserEmail">
            </SfTextBox>
            <ValidationMessage For="@(() => projectAddEdit.UserEmail)" />

        </div>
        <br /><br />
        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="@CloseDialog">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

@code {
    IEnumerable<Project>? projects;
    private List<ItemModel> Toolbaritems = new List<ItemModel>();
    SfDialog? DialogAddEditProject;
    Project projectAddEdit = new Project();
    string HeaderText = "";
    public int SelectedProjectId { get; set; } = 0;
    public string SelectedProjectName { get; set; } = string.Empty;
    public string SelectedProjectUserEmail { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Populate the list of Project objects from the Project table.
        projects = await ProjectService.ProjectReadAll();

        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new Project", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected Project", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected Project", PrefixIcon = "e-delete" });
    }

    public async Task ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding
            projectAddEdit = new Project();             // Ensures a blank form when adding
            HeaderText = "Add a Project";
            if (DialogAddEditProject is not null)
            {
                await DialogAddEditProject.ShowAsync();
            }
        }

        if (args.Item.Text == "Edit")
        {
            //Code for editing
            //Check that a Project has been selected
            if (SelectedProjectId == 0)
            {
                await DialogService.AlertAsync("Please select a project.", "No Project Selected");
                return;
            }
            else
            {
                //populate projectAddEdit (temporary data set used for the editing process)
                projectAddEdit.ProjectID = SelectedProjectId;
                projectAddEdit.ProjectName = SelectedProjectName;
                projectAddEdit.UserEmail = SelectedProjectUserEmail;

                HeaderText = "Edit Project";
                if (DialogAddEditProject is not null)
                {
                    await DialogAddEditProject.ShowAsync();
                }
            }
        }

        if (args.Item.Text == "Delete")
        {
            //Code for deleting
            if (SelectedProjectId == 0)
            {
                await DialogService.AlertAsync("Please select a project.", "No Project Selected");
                return;
            }
            else
            {
                bool isConfirm = await DialogService.ConfirmAsync(
                    "Are you sure you want to delete " + SelectedProjectName + " project?",
                    "Delete " + SelectedProjectName);
                if (isConfirm == true)
                {
                    await ProjectService.ProjectDelete(SelectedProjectId);
                    //Refresh datagrid
                    projects = await ProjectService.ProjectReadAll();
                    StateHasChanged();
                    SelectedProjectId = 0;
                }
            }
        }
    }

    protected async Task Save()
    {
        if (projectAddEdit.ProjectID == 0)
        {
            // Record is being added
            // Check for duplicates
            int duplicates = await ProjectService.CountProjectsByName(projectAddEdit.ProjectName);

            if (duplicates == 0)
                try
                {
                    await ProjectService.ProjectCreate(projectAddEdit);
                    //Refresh datagrid
                    projects = await ProjectService.ProjectReadAll();
                    StateHasChanged();
                    await CloseDialog();
                }
                catch
                {
                    // Display warning message
                    await DialogService.AlertAsync("An unexpected error has occured.", "Unknown Error");
                    return;
                }
            else
            {
                //Project already exists - warn the user
                await DialogService.AlertAsync("This project already exists", "Project Already Exists");
                return;
            }
        }
        else
        {
            // Record is being edited
            // Check for duplicates
            int duplicates = await ProjectService.CountProjectsByNameAndId(projectAddEdit.ProjectName, projectAddEdit.ProjectID);

            if (duplicates == 0)
            {
                try
                {
                    await ProjectService.ProjectUpdate(projectAddEdit);
                    //Refresh datagrid
                    projects = await ProjectService.ProjectReadAll();
                    StateHasChanged();
                    await CloseDialog();
                }
                catch
                {
                    // Display warning message
                    await DialogService.AlertAsync("An unexpected error has occured.", "Unknown Error");
                    return;
                }
            }
            else
            {
                //Project already exists - warn the user
                await DialogService.AlertAsync("This project already exists", "Project Already Exists");
                return;
            }
        }
    }

    private async Task CloseDialog()
    {
        if (DialogAddEditProject is not null)
        {
            await DialogAddEditProject.HideAsync();
        }
        StateHasChanged();
    }

    public void RowSelectHandler(RowSelectEventArgs<Project> args)
    {
        //{args.Data} returns all the data for the current selected record.
        SelectedProjectId = args.Data.ProjectID;
        SelectedProjectName = args.Data.ProjectName;
        SelectedProjectUserEmail = args.Data.UserEmail;
    }
}
