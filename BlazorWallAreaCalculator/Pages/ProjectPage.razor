@page "/project"
@using BlazorWallAreaCalculator.Data
@inject IProjectService ProjectService
@inject SfDialogService DialogService

<h3>Projects</h3>
<hr />

<SfGrid DataSource="@projects" Toolbar="@Toolbaritems">
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Project"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Project.ProjectName)"
                    HeaderText="Project"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
        <GridColumn Field="@nameof(Project.UserEmail)"
                    HeaderText="User Email"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="DialogAddEditProject" IsModal="true" Width="500px" ShowCloseIcon="false" AllowDragging="true" Visible="false">
    <DialogTemplates>
        <Header> @HeaderText </Header>
    </DialogTemplates>
    <EditForm Model="@projectAddEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <div>

            <SfTextBox Enabled="true" Placeholder="Project"
                       FloatLabelType="@FloatLabelType.Always"
            @bind-Value="projectAddEdit.ProjectName">
            </SfTextBox>
            <ValidationMessage For="@(() => projectAddEdit.ProjectName)" />

            <SfTextBox Enabled="true" Placeholder="User Email"
                       FloatLabelType="@FloatLabelType.Always"
            @bind-Value="projectAddEdit.UserEmail">
            </SfTextBox>
            <ValidationMessage For="@(() => projectAddEdit.UserEmail)" />

        </div>
        <br /><br />
        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="@CloseDialog">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

@code {
    IEnumerable<Project>? projects;
    private List<ItemModel> Toolbaritems = new List<ItemModel>();
    SfDialog? DialogAddEditProject;
    Project projectAddEdit = new Project();
    string HeaderText = "";


    protected override async Task OnInitializedAsync()
    {
        //Populate the list of Project objects from the Project table.
        projects = await ProjectService.ProjectReadAll();

        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new Project", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected Project", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected Project", PrefixIcon = "e-delete" });

    }

    public async Task ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding
            projectAddEdit = new Project();             // Ensures a blank form when adding
            HeaderText = "Add a Project";
            if (DialogAddEditProject is not null)
            {
                await DialogAddEditProject.ShowAsync();
            }

        }

        if (args.Item.Text == "Edit")
        {
            //Code for editing
        }

        if (args.Item.Text == "Delete")
        {
            //Code for deleting
        }
    }

    protected async Task Save()
    {
        if (projectAddEdit.ProjectID == 0)
        {
            // Record is being added
            if (await ProjectService.ProjectCreate(projectAddEdit))
            {
                //Refresh datagrid
                projects = await ProjectService.ProjectReadAll();
                StateHasChanged();
                await CloseDialog();
            }
            else
            {
                // Display warning message
                await DialogService.AlertAsync("An unexpected error has occured.", "Unknown Error");
                return;
            }

        }
        else
        {
            // Record is being edited
            if (await ProjectService.ProjectUpdate(projectAddEdit))
            {
                //Refresh datagrid
                projects = await ProjectService.ProjectReadAll();
                StateHasChanged();
                await CloseDialog();
            }
            else
            {
                // Display warning message
                await DialogService.AlertAsync("An unexpected error has occured.", "Unknown Error");
                return;
            }
        }
    }

    private async Task CloseDialog()
    {
        if (DialogAddEditProject is not null)
        {
            await DialogAddEditProject.HideAsync();
        }
        StateHasChanged();
    }


}
